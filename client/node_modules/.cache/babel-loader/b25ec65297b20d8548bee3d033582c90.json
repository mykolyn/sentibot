{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport MessageList from './MessageList';\nimport UserInput from './UserInput';\nimport Header from './Header';\n\nvar ChatWindow = function (_Component) {\n  _inherits(ChatWindow, _Component);\n\n  function ChatWindow(props) {\n    _classCallCheck(this, ChatWindow);\n\n    return _possibleConstructorReturn(this, _Component.call(this, props));\n  }\n\n  ChatWindow.prototype.onUserInputSubmit = function onUserInputSubmit(message) {\n    this.props.onUserInputSubmit(message);\n  };\n\n  ChatWindow.prototype.onFilesSelected = function onFilesSelected(filesList) {\n    this.props.onFilesSelected(filesList);\n  };\n\n  ChatWindow.prototype.render = function render() {\n    var messageList = this.props.messageList || [];\n    var classList = [\"sc-chat-window\", this.props.isOpen ? \"opened\" : \"closed\"];\n    return React.createElement('div', {\n      className: classList.join(' ')\n    }, React.createElement(Header, {\n      teamName: this.props.agentProfile.teamName,\n      imageUrl: this.props.agentProfile.imageUrl,\n      onClose: this.props.onClose\n    }), React.createElement(MessageList, {\n      messages: messageList,\n      imageUrl: this.props.agentProfile.imageUrl\n    }), React.createElement(UserInput, {\n      onSubmit: this.onUserInputSubmit.bind(this),\n      onFilesSelected: this.onFilesSelected.bind(this),\n      showEmoji: this.props.showEmoji\n    }));\n  };\n\n  return ChatWindow;\n}(Component);\n\nChatWindow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  agentProfile: PropTypes.object.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onFilesSelected: PropTypes.func,\n  onUserInputSubmit: PropTypes.func.isRequired,\n  showEmoji: PropTypes.bool\n} : {};\nexport default ChatWindow;","map":null,"metadata":{},"sourceType":"module"}