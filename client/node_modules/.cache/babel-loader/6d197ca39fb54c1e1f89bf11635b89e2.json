{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ChatWindow from './ChatWindow';\nimport launcherIcon from './../assets/logo-no-bg.svg';\nimport incomingMessageSound from './../assets/sounds/notification.mp3';\nimport launcherIconActive from './../assets/close-icon.png';\n\nvar Launcher = function (_Component) {\n  _inherits(Launcher, _Component);\n\n  function Launcher() {\n    _classCallCheck(this, Launcher);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this));\n\n    _this.state = {\n      launcherIcon: launcherIcon,\n      isOpen: false\n    };\n    return _this;\n  }\n\n  Launcher.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.mute) {\n      return;\n    }\n\n    var nextMessage = nextProps.messageList[nextProps.messageList.length - 1];\n    var isIncoming = (nextMessage || {}).author === 'them';\n    var isNew = nextProps.messageList.length > this.props.messageList.length;\n\n    if (isIncoming && isNew) {\n      this.playIncomingMessageSound();\n    }\n  };\n\n  Launcher.prototype.playIncomingMessageSound = function playIncomingMessageSound() {\n    var audio = new Audio(incomingMessageSound);\n    audio.play();\n  };\n\n  Launcher.prototype.handleClick = function handleClick() {\n    if (this.props.handleClick !== undefined) {\n      this.props.handleClick();\n    } else {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  };\n\n  Launcher.prototype.render = function render() {\n    var isOpen = this.props.hasOwnProperty('isOpen') ? this.props.isOpen : this.state.isOpen;\n    var classList = ['sc-launcher', isOpen ? 'opened' : ''];\n    return React.createElement('div', {\n      id: 'sc-launcher'\n    }, React.createElement('div', {\n      className: classList.join(' '),\n      onClick: this.handleClick.bind(this)\n    }, React.createElement(MessageCount, {\n      count: this.props.newMessagesCount,\n      isOpen: isOpen\n    }), React.createElement('img', {\n      className: \"sc-open-icon\",\n      src: launcherIconActive\n    }), React.createElement('img', {\n      className: \"sc-closed-icon\",\n      src: launcherIcon\n    })), React.createElement(ChatWindow, {\n      messageList: this.props.messageList,\n      onUserInputSubmit: this.props.onMessageWasSent,\n      onFilesSelected: this.props.onFilesSelected,\n      agentProfile: this.props.agentProfile,\n      isOpen: isOpen,\n      onClose: this.handleClick.bind(this),\n      showEmoji: this.props.showEmoji\n    }));\n  };\n\n  return Launcher;\n}(Component);\n\nvar MessageCount = function MessageCount(props) {\n  if (props.count === 0 || props.isOpen === true) {\n    return null;\n  }\n\n  return React.createElement('div', {\n    className: \"sc-new-messages-count\"\n  }, props.count);\n};\n\nLauncher.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  onMessageWasReceived: PropTypes.func,\n  onMessageWasSent: PropTypes.func,\n  newMessagesCount: PropTypes.number,\n  isOpen: PropTypes.bool,\n  handleClick: PropTypes.func,\n  messageList: PropTypes.arrayOf(PropTypes.object),\n  mute: PropTypes.bool,\n  showEmoji: PropTypes.bool\n} : {};\nLauncher.defaultProps = {\n  newMessagesCount: 0,\n  showEmoji: true\n};\nexport default Launcher;","map":null,"metadata":{},"sourceType":"module"}