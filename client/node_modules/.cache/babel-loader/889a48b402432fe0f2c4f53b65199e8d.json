{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport TextMessage from './TextMessage';\nimport EmojiMessage from './EmojiMessage';\nimport FileMessage from './FileMessage';\nimport chatIconUrl from './../../assets/chat-icon.svg';\n\nvar Message = function (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Message.prototype._renderMessageOfType = function _renderMessageOfType(type) {\n    switch (type) {\n      case 'text':\n        return React.createElement(TextMessage, this.props.message);\n\n      case 'emoji':\n        return React.createElement(EmojiMessage, this.props.message);\n\n      case 'file':\n        return React.createElement(FileMessage, this.props.message);\n\n      default:\n        console.error('Attempting to load message with unsupported file type \\'' + type + '\\'');\n    }\n  };\n\n  Message.prototype.render = function render() {\n    var contentClassList = [\"sc-message--content\", this.props.message.author === \"me\" ? \"sent\" : \"received\"];\n    return React.createElement('div', {\n      className: 'sc-message'\n    }, React.createElement('div', {\n      className: contentClassList.join(\" \")\n    }, React.createElement('div', {\n      className: 'sc-message--avatar',\n      style: {\n        backgroundImage: 'url(' + chatIconUrl + ')'\n      }\n    }), this._renderMessageOfType(this.props.message.type)));\n  };\n\n  return Message;\n}(Component);\n\nexport default Message;","map":null,"metadata":{},"sourceType":"module"}