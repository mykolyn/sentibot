{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\n\nvar PopupWindow = function (_Component) {\n  _inherits(PopupWindow, _Component);\n\n  function PopupWindow() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, PopupWindow);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.interceptLauncherClick = function (e) {\n      var isOpen = _this.props.isOpen;\n      var clickedOutside = !_this.emojiPopup.contains(e.target) && isOpen;\n      clickedOutside && _this.props.onClickedOutside(e);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  PopupWindow.prototype.componentDidMount = function componentDidMount() {\n    this.scLauncher = document.querySelector('#sc-launcher');\n    this.scLauncher.addEventListener('click', this.interceptLauncherClick);\n  };\n\n  PopupWindow.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.scLauncher.removeEventListener('click', this.interceptLauncherClick);\n  };\n\n  PopupWindow.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        isOpen = _props.isOpen,\n        children = _props.children;\n    return React.createElement('div', {\n      className: 'sc-popup-window',\n      ref: function ref(e) {\n        return _this2.emojiPopup = e;\n      }\n    }, React.createElement('div', {\n      className: 'sc-popup-window--cointainer ' + (isOpen ? '' : 'closed')\n    }, React.createElement('input', {\n      onChange: this.props.onInputChange,\n      className: 'sc-popup-window--search',\n      placeholder: 'Search emoji...'\n    }), children));\n  };\n\n  return PopupWindow;\n}(Component);\n\nexport default PopupWindow;","map":null,"metadata":{},"sourceType":"module"}