{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SendIcon from './icons/SendIcon';\nimport FileIcon from './icons/FileIcon';\nimport EmojiIcon from './icons/EmojiIcon';\nimport PopupWindow from './popups/PopupWindow';\nimport EmojiPicker from './emoji-picker/EmojiPicker';\n\nvar UserInput = function (_Component) {\n  _inherits(UserInput, _Component);\n\n  function UserInput() {\n    _classCallCheck(this, UserInput);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this));\n\n    _this.toggleEmojiPicker = function (e) {\n      e.preventDefault();\n\n      if (!_this.state.emojiPickerIsOpen) {\n        _this.setState({\n          emojiPickerIsOpen: true\n        });\n      }\n    };\n\n    _this.closeEmojiPicker = function (e) {\n      if (_this.emojiPickerButton.contains(e.target)) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      _this.setState({\n        emojiPickerIsOpen: false\n      });\n    };\n\n    _this._handleEmojiPicked = function (emoji) {\n      _this.setState({\n        emojiPickerIsOpen: false\n      });\n\n      if (_this.state.inputHasText) {\n        _this.userInput.innerHTML += emoji;\n      } else {\n        _this.props.onSubmit({\n          author: 'me',\n          type: 'emoji',\n          data: {\n            emoji: emoji\n          }\n        });\n      }\n    };\n\n    _this.handleEmojiFilterChange = function (event) {\n      var emojiFilter = event.target.value;\n\n      _this.setState({\n        emojiFilter: emojiFilter\n      });\n    };\n\n    _this._renderEmojiPopup = function () {\n      return React.createElement(PopupWindow, {\n        isOpen: _this.state.emojiPickerIsOpen,\n        onClickedOutside: _this.closeEmojiPicker,\n        onInputChange: _this.handleEmojiFilterChange\n      }, React.createElement(EmojiPicker, {\n        onEmojiPicked: _this._handleEmojiPicked,\n        filter: _this.state.emojiFilter\n      }));\n    };\n\n    _this.state = {\n      inputActive: false,\n      inputHasText: false,\n      emojiPickerIsOpen: false,\n      emojiFilter: ''\n    };\n    return _this;\n  }\n\n  UserInput.prototype.componentDidMount = function componentDidMount() {\n    this.emojiPickerButton = document.querySelector('#sc-emoji-picker-button');\n  };\n\n  UserInput.prototype.handleKeyDown = function handleKeyDown(event) {\n    if (event.keyCode === 13 && !event.shiftKey) {\n      return this._submitText(event);\n    }\n  };\n\n  UserInput.prototype.handleKeyUp = function handleKeyUp(event) {\n    var inputHasText = event.target.innerHTML.length !== 0 && event.target.innerText !== '\\n';\n    this.setState({\n      inputHasText: inputHasText\n    });\n  };\n\n  UserInput.prototype._showFilePicker = function _showFilePicker() {\n    this._fileUploadButton.click();\n  };\n\n  UserInput.prototype._submitText = function _submitText(event) {\n    event.preventDefault();\n    var text = this.userInput.textContent;\n\n    if (text && text.length > 0) {\n      this.props.onSubmit({\n        author: 'me',\n        type: 'text',\n        data: {\n          text: text\n        }\n      });\n      this.userInput.innerHTML = '';\n    }\n  };\n\n  UserInput.prototype._onFilesSelected = function _onFilesSelected(event) {\n    if (event.target.files && event.target.files.length > 0) {\n      this.props.onFilesSelected(event.target.files);\n    }\n  };\n\n  UserInput.prototype._renderSendOrFileIcon = function _renderSendOrFileIcon() {\n    var _this2 = this;\n\n    if (this.state.inputHasText) {\n      return React.createElement('div', {\n        className: 'sc-user-input--button'\n      }, React.createElement(SendIcon, {\n        onClick: this._submitText.bind(this)\n      }));\n    }\n\n    return React.createElement('div', {\n      className: 'sc-user-input--button'\n    }, React.createElement(FileIcon, {\n      onClick: this._showFilePicker.bind(this)\n    }), React.createElement('input', {\n      type: 'file',\n      name: 'files[]',\n      multiple: true,\n      ref: function ref(e) {\n        _this2._fileUploadButton = e;\n      },\n      onChange: this._onFilesSelected.bind(this)\n    }));\n  };\n\n  UserInput.prototype.render = function render() {\n    var _this3 = this;\n\n    var _state = this.state,\n        emojiPickerIsOpen = _state.emojiPickerIsOpen,\n        inputActive = _state.inputActive;\n    return React.createElement('form', {\n      className: 'sc-user-input ' + (inputActive ? 'active' : '')\n    }, React.createElement('div', {\n      role: 'button',\n      tabIndex: '0',\n      onFocus: function onFocus() {\n        _this3.setState({\n          inputActive: true\n        });\n      },\n      onBlur: function onBlur() {\n        _this3.setState({\n          inputActive: false\n        });\n      },\n      ref: function ref(e) {\n        _this3.userInput = e;\n      },\n      onKeyDown: this.handleKeyDown.bind(this),\n      onKeyUp: this.handleKeyUp.bind(this),\n      contentEditable: 'true',\n      placeholder: 'Write a reply...',\n      className: 'sc-user-input--text'\n    }), React.createElement('div', {\n      className: 'sc-user-input--buttons'\n    }, React.createElement('div', {\n      className: 'sc-user-input--button'\n    }), React.createElement('div', {\n      className: 'sc-user-input--button'\n    }, this.props.showEmoji && React.createElement(EmojiIcon, {\n      onClick: this.toggleEmojiPicker,\n      isActive: emojiPickerIsOpen,\n      tooltip: this._renderEmojiPopup()\n    })), this._renderSendOrFileIcon()));\n  };\n\n  return UserInput;\n}(Component);\n\nUserInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  onSubmit: PropTypes.func.isRequired,\n  onFilesSelected: PropTypes.func.isRequired,\n  showEmoji: PropTypes.bool\n} : {};\nexport default UserInput;","map":null,"metadata":{},"sourceType":"module"}