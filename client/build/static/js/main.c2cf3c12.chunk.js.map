{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","MessagesList","newMessage","handleChange","event","_this","setState","target","value","handleClick","preventDefault","axios","post","content","then","result","console","log","data","window","location","reload","catch","err","_this2","this","get","react_default","a","createElement","className","val","onChange","onClick","map","key","_id","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PAsDeA,6MAlDfC,MAAO,CACLC,aAAa,GAEbC,WAAW,MAcbC,aAAe,SAACC,GAChBC,EAAKC,SAAS,CAAEJ,WAAYE,EAAMG,OAAOC,WAGzCC,YAAc,SAACL,GACbA,EAAMM,iBACNC,IAAMC,KAAK,aAAc,CAACC,QAASR,EAAKL,MAAME,aAC7CY,KAAK,SAACC,GACLC,QAAQC,IAAI,qBAAsBF,EAAOG,MAEvCC,OAAOC,SAASC,WAGnBC,MAAM,SAAAC,GAAG,OAAGP,QAAQC,IAAIM,yFAtBR,IAAAC,EAAAC,KACnBd,IAAMe,IAAI,cACTZ,KAAK,SAACC,GACLC,QAAQC,IAAIF,EAAOG,MACnBM,EAAKlB,SAAS,CAACL,aAAcc,EAAOG,SAErCI,MAAM,SAAAC,GAAG,OAAGP,QAAQC,IAAIM,sCAmBrB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOE,IAAKN,KAAKzB,MAAME,WAAY8B,SAAUP,KAAKtB,eAClDwB,EAAAC,EAAAC,cAAA,UAAQI,QAASR,KAAKhB,aAAtB,WAEFkB,EAAAC,EAAAC,cAAA,WACGJ,KAAKzB,MAAMC,aAAaiC,IAAI,SAAA9B,GAAK,OAChCuB,EAAAC,EAAAC,cAAA,KAAGM,IAAK/B,EAAMgC,KAAMhC,EAAMS,oBA1CpBwB,aCSEC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OACPf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,WAAP,KACEhB,EAAAC,EAAAC,cAACe,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,KAAK,SAAAoC,GACJA,EAAaC,eAEd7B,MAAM,SAAA8B,GACLpC,QAAQoC,MAAMA,EAAMC","file":"static/js/main.c2cf3c12.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from'axios';\n\nclass App extends Component {\nstate= {\n  MessagesList:[],\n  // {title:'cats'},{title:'dog'}\n  newMessage:\"\"\n}\n\n\n\ncomponentDidMount(){\naxios.get('/api/convo')\n.then((result) => {\n  console.log(result.data)\n  this.setState({MessagesList: result.data})\n})\n.catch(err=> console.log(err))\n}\n\nhandleChange = (event)=>{\nthis.setState({ newMessage: event.target.value})\n};\n\nhandleClick = (event) => {\n  event.preventDefault();\n  axios.post('/api/convo', {content: this.state.newMessage})\n  .then((result) =>{\n    console.log(\"result from app.js\", result.data)\n   \n      window.location.reload();\n    \n  })\n  .catch(err=> console.log(err))\n}\n  render(){\n    return(\n      <div className='App'>\n        <form> \n          <input val={this.state.newMessage} onChange={this.handleChange}/>\n          <button onClick={this.handleClick}>submit</button>\n        </form>\n        <div>\n          {this.state.MessagesList.map(event =>\n            <p key={event._id}>{event.content}</p>\n            )}\n        </div>\n      </div>\n    )\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}